from distutils import version
from ddanalysis.knowledgebase import DDPredicate
from ddanalysis.members.memberanalysis import DDTrait


class DDPackageVersionAnalyzer(DDTrait):

    def __init__(self, name, logfile):
        super(DDPackageVersionAnalyzer, self).__init__("Version of " + name, logfile)
        self._name = name
        self._logfile = logfile

    def nextline(self, line, markers):
        if line is None:
            return

        if self._name in markers["versions"]:
            raise RuntimeError, " version alredy there"

        epoch = None
        if line.startswith(self._name):
            line = line[len(self._name) + 1:]

        ver = line.split("-")
        mmf = ver[0].split(".")
        rel = None
        if len(ver) > 1:
            rel = "-".join(ver[1:])

        mmf_suf = None
        if len(mmf) > 3:
            mmf_suf = ".".join(mmf[3:])
            mmf = ".".join(mmf[:3])
        else:
            mmf = ver[0]

        markers["versions"][self._name] = {"version":mmf, "release":rel, "epoch":epoch, "version_suffix":mmf_suf}


class DDVersionPredicate(DDPredicate):
    LT = 0
    EQ = 1
    GT = 2

    def __init__(self, name, verel, eqtype):
        super(DDVersionPredicate, self).__init__()

        self._name = name

        self._version = version.StrictVersion(verel[0])
        self._nvr = verel[0]

        if len(verel) > 1:
            self._release = verel[1]
            self._nvr += "-"
            self._nvr += str(self._release)
        else:
            self._release = None

        self._eq = eqtype
        self._sd = "{0} {1} {2}".format(name,
                ["<", "==", ">"][self._eq], self._nvr)


    def satisfied_by(self, markers):
        if not self._name in markers["versions"]:
            return (False, ["No version of " + self._name])

        ver = markers["versions"][self._name]["version"]
        vobj = version.StrictVersion(ver)

        if self._version > vobj:
            res = self._eq == DDVersionPredicate.LT
        elif self._version < vobj:
            res = self._eq == DDVersionPredicate.GT
        else:
            res = self._eq == DDVersionPredicate.EQ

        return (res, [self._sd])

    @property
    def name(self):
        return self._sd


class DDLocalVersionPredicate(DDPredicate):

    def __init__(self, name):
        super(DDVersionPredicate, self).__init__()

        self._name = name
        self._sd = "{0} is running not released version"

    def satisfied_by(self, markers):
        if not self._name in markers["versions"]:
            return (False, ["No version of " + self._name])

        # Local version has version suffix generated by 'git describe'
        return markers["version"][self._name]["version_suffix"] is not None

    @property
    def name(self):
        return self._sd

